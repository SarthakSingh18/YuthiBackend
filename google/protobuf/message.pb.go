// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: message.proto

package protobuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CollabAccessType int32

const (
	CollabAccessType_private CollabAccessType = 0
	CollabAccessType_public  CollabAccessType = 1
)

// Enum value maps for CollabAccessType.
var (
	CollabAccessType_name = map[int32]string{
		0: "private",
		1: "public",
	}
	CollabAccessType_value = map[string]int32{
		"private": 0,
		"public":  1,
	}
)

func (x CollabAccessType) Enum() *CollabAccessType {
	p := new(CollabAccessType)
	*p = x
	return p
}

func (x CollabAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollabAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (CollabAccessType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x CollabAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollabAccessType.Descriptor instead.
func (CollabAccessType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type CollabParticipantRole int32

const (
	CollabParticipantRole_owner   CollabParticipantRole = 0
	CollabParticipantRole_admin   CollabParticipantRole = 1
	CollabParticipantRole_manager CollabParticipantRole = 2
	CollabParticipantRole_user    CollabParticipantRole = 3
)

// Enum value maps for CollabParticipantRole.
var (
	CollabParticipantRole_name = map[int32]string{
		0: "owner",
		1: "admin",
		2: "manager",
		3: "user",
	}
	CollabParticipantRole_value = map[string]int32{
		"owner":   0,
		"admin":   1,
		"manager": 2,
		"user":    3,
	}
)

func (x CollabParticipantRole) Enum() *CollabParticipantRole {
	p := new(CollabParticipantRole)
	*p = x
	return p
}

func (x CollabParticipantRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollabParticipantRole) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (CollabParticipantRole) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x CollabParticipantRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollabParticipantRole.Descriptor instead.
func (CollabParticipantRole) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profession string `protobuf:"bytes,3,opt,name=profession,proto3" json:"profession,omitempty"`
	TagLine    string `protobuf:"bytes,4,opt,name=tag_line,json=tagLine,proto3" json:"tag_line,omitempty"`
	IconUrl    string `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Participant) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Participant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Participant) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *Participant) GetTagLine() string {
	if x != nil {
		return x.TagLine
	}
	return ""
}

func (x *Participant) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type CollabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AccessType       CollabAccessType        `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=protobuf.CollabAccessType" json:"access_type,omitempty"`
	IconUrl          string                  `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	SendMessageRoles []CollabParticipantRole `protobuf:"varint,6,rep,packed,name=send_message_roles,json=sendMessageRoles,proto3,enum=protobuf.CollabParticipantRole" json:"send_message_roles,omitempty"`
}

func (x *CollabInfo) Reset() {
	*x = CollabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabInfo) ProtoMessage() {}

func (x *CollabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabInfo.ProtoReflect.Descriptor instead.
func (*CollabInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *CollabInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollabInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollabInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CollabInfo) GetAccessType() CollabAccessType {
	if x != nil {
		return x.AccessType
	}
	return CollabAccessType_private
}

func (x *CollabInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CollabInfo) GetSendMessageRoles() []CollabParticipantRole {
	if x != nil {
		return x.SendMessageRoles
	}
	return nil
}

type CollabDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AccessType   CollabAccessType `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=protobuf.CollabAccessType" json:"access_type,omitempty"`
	IconUrl      string           `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Participants []*Participant   `protobuf:"bytes,6,rep,name=participants,proto3" json:"participants,omitempty"`
	SubCollabs   []*CollabInfo    `protobuf:"bytes,7,rep,name=sub_collabs,json=subCollabs,proto3" json:"sub_collabs,omitempty"`
}

func (x *CollabDetailInfo) Reset() {
	*x = CollabDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabDetailInfo) ProtoMessage() {}

func (x *CollabDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabDetailInfo.ProtoReflect.Descriptor instead.
func (*CollabDetailInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *CollabDetailInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollabDetailInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollabDetailInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CollabDetailInfo) GetAccessType() CollabAccessType {
	if x != nil {
		return x.AccessType
	}
	return CollabAccessType_private
}

func (x *CollabDetailInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CollabDetailInfo) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CollabDetailInfo) GetSubCollabs() []*CollabInfo {
	if x != nil {
		return x.SubCollabs
	}
	return nil
}

type UpdateParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollabId     string         `protobuf:"bytes,1,opt,name=collab_id,json=collabId,proto3" json:"collab_id,omitempty"`
	Participants []*Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *UpdateParticipantsRequest) Reset() {
	*x = UpdateParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParticipantsRequest) ProtoMessage() {}

func (x *UpdateParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParticipantsRequest.ProtoReflect.Descriptor instead.
func (*UpdateParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateParticipantsRequest) GetCollabId() string {
	if x != nil {
		return x.CollabId
	}
	return ""
}

func (x *UpdateParticipantsRequest) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type UpdateSubCollabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollabId   string        `protobuf:"bytes,1,opt,name=collab_id,json=collabId,proto3" json:"collab_id,omitempty"`
	SubCollabs []*CollabInfo `protobuf:"bytes,2,rep,name=sub_collabs,json=subCollabs,proto3" json:"sub_collabs,omitempty"`
}

func (x *UpdateSubCollabsRequest) Reset() {
	*x = UpdateSubCollabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubCollabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubCollabsRequest) ProtoMessage() {}

func (x *UpdateSubCollabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubCollabsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubCollabsRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSubCollabsRequest) GetCollabId() string {
	if x != nil {
		return x.CollabId
	}
	return ""
}

func (x *UpdateSubCollabsRequest) GetSubCollabs() []*CollabInfo {
	if x != nil {
		return x.SubCollabs
	}
	return nil
}

type CollabDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollabId string `protobuf:"bytes,1,opt,name=collab_id,json=collabId,proto3" json:"collab_id,omitempty"`
}

func (x *CollabDetailRequest) Reset() {
	*x = CollabDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabDetailRequest) ProtoMessage() {}

func (x *CollabDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabDetailRequest.ProtoReflect.Descriptor instead.
func (*CollabDetailRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *CollabDetailRequest) GetCollabId() string {
	if x != nil {
		return x.CollabId
	}
	return ""
}

type CollabDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collab *CollabDetailInfo `protobuf:"bytes,1,opt,name=collab,proto3" json:"collab,omitempty"`
}

func (x *CollabDetailResponse) Reset() {
	*x = CollabDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabDetailResponse) ProtoMessage() {}

func (x *CollabDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabDetailResponse.ProtoReflect.Descriptor instead.
func (*CollabDetailResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *CollabDetailResponse) GetCollab() *CollabDetailInfo {
	if x != nil {
		return x.Collab
	}
	return nil
}

type CollabsListingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collabs *CollabInfo `protobuf:"bytes,1,opt,name=collabs,proto3" json:"collabs,omitempty"`
}

func (x *CollabsListingResponse) Reset() {
	*x = CollabsListingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabsListingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabsListingResponse) ProtoMessage() {}

func (x *CollabsListingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabsListingResponse.ProtoReflect.Descriptor instead.
func (*CollabsListingResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *CollabsListingResponse) GetCollabs() *CollabInfo {
	if x != nil {
		return x.Collabs
	}
	return nil
}

type CreateCollabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AccessType  CollabAccessType `protobuf:"varint,3,opt,name=access_type,json=accessType,proto3,enum=protobuf.CollabAccessType" json:"access_type,omitempty"`
	IconUrl     string           `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *CreateCollabRequest) Reset() {
	*x = CreateCollabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollabRequest) ProtoMessage() {}

func (x *CreateCollabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollabRequest.ProtoReflect.Descriptor instead.
func (*CreateCollabRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCollabRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCollabRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCollabRequest) GetAccessType() CollabAccessType {
	if x != nil {
		return x.AccessType
	}
	return CollabAccessType_private
}

func (x *CreateCollabRequest) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type UpdateCollabInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollabId    string           `protobuf:"bytes,1,opt,name=collab_id,json=collabId,proto3" json:"collab_id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AccessType  CollabAccessType `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=protobuf.CollabAccessType" json:"access_type,omitempty"`
	IconUrl     string           `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *UpdateCollabInfoRequest) Reset() {
	*x = UpdateCollabInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollabInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollabInfoRequest) ProtoMessage() {}

func (x *UpdateCollabInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollabInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateCollabInfoRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCollabInfoRequest) GetCollabId() string {
	if x != nil {
		return x.CollabId
	}
	return ""
}

func (x *UpdateCollabInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCollabInfoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCollabInfoRequest) GetAccessType() CollabAccessType {
	if x != nil {
		return x.AccessType
	}
	return CollabAccessType_private
}

func (x *UpdateCollabInfoRequest) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *Info) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Info) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xf9, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x22, 0x73, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22,
	0x6d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x22, 0x32,
	0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x22, 0x48,
	0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xc4,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x2b, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x10, 0x03, 0x32, 0xeb,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_message_proto_goTypes = []interface{}{
	(CollabAccessType)(0),             // 0: protobuf.CollabAccessType
	(CollabParticipantRole)(0),        // 1: protobuf.CollabParticipantRole
	(*Participant)(nil),               // 2: protobuf.Participant
	(*CollabInfo)(nil),                // 3: protobuf.CollabInfo
	(*CollabDetailInfo)(nil),          // 4: protobuf.CollabDetailInfo
	(*UpdateParticipantsRequest)(nil), // 5: protobuf.UpdateParticipantsRequest
	(*UpdateSubCollabsRequest)(nil),   // 6: protobuf.UpdateSubCollabsRequest
	(*CollabDetailRequest)(nil),       // 7: protobuf.CollabDetailRequest
	(*CollabDetailResponse)(nil),      // 8: protobuf.CollabDetailResponse
	(*CollabsListingResponse)(nil),    // 9: protobuf.CollabsListingResponse
	(*CreateCollabRequest)(nil),       // 10: protobuf.CreateCollabRequest
	(*UpdateCollabInfoRequest)(nil),   // 11: protobuf.UpdateCollabInfoRequest
	(*Info)(nil),                      // 12: protobuf.Info
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: protobuf.CollabInfo.access_type:type_name -> protobuf.CollabAccessType
	1,  // 1: protobuf.CollabInfo.send_message_roles:type_name -> protobuf.CollabParticipantRole
	0,  // 2: protobuf.CollabDetailInfo.access_type:type_name -> protobuf.CollabAccessType
	2,  // 3: protobuf.CollabDetailInfo.participants:type_name -> protobuf.Participant
	3,  // 4: protobuf.CollabDetailInfo.sub_collabs:type_name -> protobuf.CollabInfo
	2,  // 5: protobuf.UpdateParticipantsRequest.participants:type_name -> protobuf.Participant
	3,  // 6: protobuf.UpdateSubCollabsRequest.sub_collabs:type_name -> protobuf.CollabInfo
	4,  // 7: protobuf.CollabDetailResponse.collab:type_name -> protobuf.CollabDetailInfo
	3,  // 8: protobuf.CollabsListingResponse.collabs:type_name -> protobuf.CollabInfo
	0,  // 9: protobuf.CreateCollabRequest.access_type:type_name -> protobuf.CollabAccessType
	0,  // 10: protobuf.UpdateCollabInfoRequest.access_type:type_name -> protobuf.CollabAccessType
	7,  // 11: protobuf.CollabService.getCollabDetailInfo:input_type -> protobuf.CollabDetailRequest
	10, // 12: protobuf.CollabService.createCollab:input_type -> protobuf.CreateCollabRequest
	11, // 13: protobuf.CollabService.updateCollabInfo:input_type -> protobuf.UpdateCollabInfoRequest
	8,  // 14: protobuf.CollabService.getCollabDetailInfo:output_type -> protobuf.CollabDetailResponse
	12, // 15: protobuf.CollabService.createCollab:output_type -> protobuf.Info
	12, // 16: protobuf.CollabService.updateCollabInfo:output_type -> protobuf.Info
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubCollabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabsListingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollabInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollabServiceClient is the client API for CollabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollabServiceClient interface {
	// rpc getAllCollabs(google.protobuf.Empty) returns (CollabsListingResponse);
	GetCollabDetailInfo(ctx context.Context, in *CollabDetailRequest, opts ...grpc.CallOption) (*CollabDetailResponse, error)
	CreateCollab(ctx context.Context, in *CreateCollabRequest, opts ...grpc.CallOption) (*Info, error)
	UpdateCollabInfo(ctx context.Context, in *UpdateCollabInfoRequest, opts ...grpc.CallOption) (*Info, error)
}

type collabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollabServiceClient(cc grpc.ClientConnInterface) CollabServiceClient {
	return &collabServiceClient{cc}
}

func (c *collabServiceClient) GetCollabDetailInfo(ctx context.Context, in *CollabDetailRequest, opts ...grpc.CallOption) (*CollabDetailResponse, error) {
	out := new(CollabDetailResponse)
	err := c.cc.Invoke(ctx, "/protobuf.CollabService/getCollabDetailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabServiceClient) CreateCollab(ctx context.Context, in *CreateCollabRequest, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/protobuf.CollabService/createCollab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabServiceClient) UpdateCollabInfo(ctx context.Context, in *UpdateCollabInfoRequest, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/protobuf.CollabService/updateCollabInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollabServiceServer is the server API for CollabService service.
type CollabServiceServer interface {
	// rpc getAllCollabs(google.protobuf.Empty) returns (CollabsListingResponse);
	GetCollabDetailInfo(context.Context, *CollabDetailRequest) (*CollabDetailResponse, error)
	CreateCollab(context.Context, *CreateCollabRequest) (*Info, error)
	UpdateCollabInfo(context.Context, *UpdateCollabInfoRequest) (*Info, error)
}

// UnimplementedCollabServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCollabServiceServer struct {
}

func (*UnimplementedCollabServiceServer) GetCollabDetailInfo(context.Context, *CollabDetailRequest) (*CollabDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollabDetailInfo not implemented")
}
func (*UnimplementedCollabServiceServer) CreateCollab(context.Context, *CreateCollabRequest) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollab not implemented")
}
func (*UnimplementedCollabServiceServer) UpdateCollabInfo(context.Context, *UpdateCollabInfoRequest) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollabInfo not implemented")
}

func RegisterCollabServiceServer(s *grpc.Server, srv CollabServiceServer) {
	s.RegisterService(&_CollabService_serviceDesc, srv)
}

func _CollabService_GetCollabDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollabDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabServiceServer).GetCollabDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CollabService/GetCollabDetailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabServiceServer).GetCollabDetailInfo(ctx, req.(*CollabDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabService_CreateCollab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabServiceServer).CreateCollab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CollabService/CreateCollab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabServiceServer).CreateCollab(ctx, req.(*CreateCollabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabService_UpdateCollabInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollabInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabServiceServer).UpdateCollabInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CollabService/UpdateCollabInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabServiceServer).UpdateCollabInfo(ctx, req.(*UpdateCollabInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollabService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.CollabService",
	HandlerType: (*CollabServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCollabDetailInfo",
			Handler:    _CollabService_GetCollabDetailInfo_Handler,
		},
		{
			MethodName: "createCollab",
			Handler:    _CollabService_CreateCollab_Handler,
		},
		{
			MethodName: "updateCollabInfo",
			Handler:    _CollabService_UpdateCollabInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
