// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/service.proto",
}

// HttpBodyExampleServiceClient is the client API for HttpBodyExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpBodyExampleServiceClient interface {
	HelloWorld(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type httpBodyExampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpBodyExampleServiceClient(cc grpc.ClientConnInterface) HttpBodyExampleServiceClient {
	return &httpBodyExampleServiceClient{cc}
}

func (c *httpBodyExampleServiceClient) HelloWorld(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/HttpBodyExampleService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpBodyExampleServiceServer is the server API for HttpBodyExampleService service.
// All implementations must embed UnimplementedHttpBodyExampleServiceServer
// for forward compatibility
type HttpBodyExampleServiceServer interface {
	HelloWorld(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedHttpBodyExampleServiceServer()
}

// UnimplementedHttpBodyExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpBodyExampleServiceServer struct {
}

func (UnimplementedHttpBodyExampleServiceServer) HelloWorld(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedHttpBodyExampleServiceServer) mustEmbedUnimplementedHttpBodyExampleServiceServer() {
}

// UnsafeHttpBodyExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpBodyExampleServiceServer will
// result in compilation errors.
type UnsafeHttpBodyExampleServiceServer interface {
	mustEmbedUnimplementedHttpBodyExampleServiceServer()
}

func RegisterHttpBodyExampleServiceServer(s grpc.ServiceRegistrar, srv HttpBodyExampleServiceServer) {
	s.RegisterService(&HttpBodyExampleService_ServiceDesc, srv)
}

func _HttpBodyExampleService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBodyExampleServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HttpBodyExampleService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBodyExampleServiceServer).HelloWorld(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpBodyExampleService_ServiceDesc is the grpc.ServiceDesc for HttpBodyExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpBodyExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HttpBodyExampleService",
	HandlerType: (*HttpBodyExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HttpBodyExampleService_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/service.proto",
}

// OrganisationClient is the client API for Organisation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganisationClient interface {
	CreateOrganisation(ctx context.Context, in *OrganisationRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type organisationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganisationClient(cc grpc.ClientConnInterface) OrganisationClient {
	return &organisationClient{cc}
}

func (c *organisationClient) CreateOrganisation(ctx context.Context, in *OrganisationRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/Organisation/createOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganisationServer is the server API for Organisation service.
// All implementations must embed UnimplementedOrganisationServer
// for forward compatibility
type OrganisationServer interface {
	CreateOrganisation(context.Context, *OrganisationRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedOrganisationServer()
}

// UnimplementedOrganisationServer must be embedded to have forward compatible implementations.
type UnimplementedOrganisationServer struct {
}

func (UnimplementedOrganisationServer) CreateOrganisation(context.Context, *OrganisationRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganisation not implemented")
}
func (UnimplementedOrganisationServer) mustEmbedUnimplementedOrganisationServer() {}

// UnsafeOrganisationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganisationServer will
// result in compilation errors.
type UnsafeOrganisationServer interface {
	mustEmbedUnimplementedOrganisationServer()
}

func RegisterOrganisationServer(s grpc.ServiceRegistrar, srv OrganisationServer) {
	s.RegisterService(&Organisation_ServiceDesc, srv)
}

func _Organisation_CreateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationServer).CreateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Organisation/createOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationServer).CreateOrganisation(ctx, req.(*OrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Organisation_ServiceDesc is the grpc.ServiceDesc for Organisation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organisation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Organisation",
	HandlerType: (*OrganisationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrganisation",
			Handler:    _Organisation_CreateOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/service.proto",
}
